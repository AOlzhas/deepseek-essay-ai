import pandas as pd
import gradio as gr
import matplotlib.pyplot as plt
from datetime import datetime
from transformers import pipeline
import hashlib
import time

# –°—Ç–∏–ª–∏ CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
css = """
.gradio-container {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}
.header {
    background: linear-gradient(135deg, #6e8efb, #a777e3);
    color: white;
    padding: 20px;
    border-radius: 10px;
    text-align: center;
    margin-bottom: 20px;
}
.tab {
    background: #f5f7ff;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}
button {
    background: #6e8efb !important;
    color: white !important;
    border: none !important;
    padding: 10px 20px !important;
    border-radius: 5px !important;
    transition: all 0.3s !important;
}
button:hover {
    background: #5a7de8 !important;
    transform: translateY(-2px);
}
.progress-bar {
    height: 10px;
    background: #e0e0e0;
    border-radius: 5px;
    margin: 10px 0;
}
.progress-fill {
    height: 100%;
    border-radius: 5px;
    background: linear-gradient(90deg, #6e8efb, #a777e3);
}
"""

class EducationPlatform:
    def __init__(self):
        self.users = pd.DataFrame(columns=['user_id', 'login', 'password_hash', 'role', 'full_name', 'email'])
        self.submissions = pd.DataFrame(columns=[
            'student_id', 'teacher_id', 'timestamp', 'essay',
            'argument', 'logic', 'clarity', 'originality', 'feedback'
        ])
        self.evaluator = pipeline("text-classification", model="cointegrated/rubert-tiny2", device="cpu")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        self._add_user("t001", "teacher", self._hash_password("12345"), "teacher", "–ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è", "teacher@school.ru")

    def _hash_password(self, password):
        return hashlib.sha256(password.encode()).hexdigest()

    def _add_user(self, user_id, login, password_hash, role, full_name="", email=""):
        new_user = {
            'user_id': user_id,
            'login': login,
            'password_hash': password_hash,
            'role': role,
            'full_name': full_name,
            'email': email
        }
        self.users = pd.concat([self.users, pd.DataFrame([new_user])], ignore_index=True)

    def register_user(self, login, password, role, full_name, email):
        if login in self.users['login'].values:
            return False, "–õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç"
        
        user_id = f"{role[0]}{int(time.time())}"
        self._add_user(user_id, login, self._hash_password(password), role.lower(), full_name, email)
        return True, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"

    def authenticate(self, login, password):
        user = self.users[self.users['login'] == login]
        if not user.empty and user.iloc[0]['password_hash'] == self._hash_password(password):
            return "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!", True, user.iloc[0]['user_id'], user.iloc[0]['role'], user.iloc[0]['full_name']
        return "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", False, "", "", ""

    def add_submission(self, student_id, teacher_id, essay_text):
        if self._is_duplicate(student_id, essay_text):
            return False
        
        scores, feedback = self.evaluate_essay(essay_text)
        new_row = {
            'student_id': student_id,
            'teacher_id': teacher_id,
            'timestamp': datetime.now(),
            'essay': essay_text,
            **scores,
            'feedback': feedback
        }
        self.submissions = pd.concat([self.submissions, pd.DataFrame([new_row])], ignore_index=True)
        return True

    def _is_duplicate(self, student_id, essay_text):
        return any((self.submissions['student_id'] == student_id) & 
                  (self.submissions['essay'] == essay_text))

    def evaluate_essay(self, essay_text):
        criteria = {
            'argument': "–û—Ü–µ–Ω–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é (1-5):",
            'logic': "–û—Ü–µ–Ω–∏ –ª–æ–≥–∏–∫—É (1-5):",
            'clarity': "–û—Ü–µ–Ω–∏ —è—Å–Ω–æ—Å—Ç—å (1-5):",
            'originality': "–û—Ü–µ–Ω–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (1-5):"
        }
        
        scores = {}
        feedback_parts = []
        
        for criterion, prompt_start in criteria.items():
            full_prompt = f"{prompt_start} {essay_text[:500]}"
            result = self.evaluator(full_prompt)[0]
            score = min(5, max(1, round(float(result['score']) * 5, 1)))
            scores[criterion] = score
            feedback_parts.append(f"{criterion.capitalize()}: {score}/5.0")
        
        feedback = "\n".join(feedback_parts)
        return scores, feedback

    def get_student_progress(self, student_id):
        student_data = self.submissions[self.submissions['student_id'] == student_id]
        if student_data.empty:
            return None, None
        
        avg_scores = student_data[['argument', 'logic', 'clarity', 'originality']].mean()
        return student_data, avg_scores

platform = EducationPlatform()

def register_new_user(login, password, role, full_name, email):
    success, message = platform.register_user(login, password, role, full_name, email)
    return message

def handle_login(input_login, input_password):
    message, success, user_id, role, full_name = platform.authenticate(input_login, input_password)
    if success:
        panels = {
            "user_panel": gr.update(visible=True),
            "student_panel": gr.update(visible=role == "student"),
            "teacher_panel": gr.update(visible=role == "teacher")
        }
        return (
            message, 
            gr.update(value=f"{full_name} ({role.upper()})", visible=True),
            *panels.values()
        )
    return message, gr.update(visible=False), gr.update(visible=False), gr.update(visible=False), gr.update(visible=False)

def submit_essay(student_id, teacher_id, essay_text):
    if not all([student_id.strip(), teacher_id.strip(), essay_text.strip()]):
        return None, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"
    
    if platform.add_submission(student_id, teacher_id, essay_text):
        latest = platform.submissions.iloc[-1]
        scores = {
            '–ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è': latest['argument'],
            '–õ–æ–≥–∏–∫–∞': latest['logic'],
            '–Ø—Å–Ω–æ—Å—Ç—å': latest['clarity'],
            '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å': latest['originality']
        }
        return scores, latest['feedback']
    return None, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ä–∞–±–æ—Ç—ã"

def update_progress_plot(student_id):
    student_data, avg_scores = platform.get_student_progress(student_id)
    if student_data is None:
        return None
    
    plt.figure(figsize=(10, 5))
    for criterion in ['argument', 'logic', 'clarity', 'originality']:
        plt.plot(student_data['timestamp'], student_data[criterion], label=criterion.capitalize(), marker='o')
    
    plt.title("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–∞")
    plt.ylabel("–û—Ü–µ–Ω–∫–∞ (1-5)")
    plt.ylim(1, 5)
    plt.legend()
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()
    return plt.gcf()

with gr.Blocks(css=css) as app:
    with gr.Column():
        gr.Markdown("""<div class="header">
            <h1>üéì –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è</h1>
            <p>–ê–Ω–∞–ª–∏–∑ —ç—Å—Å–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò</p>
        </div>""")
        
        with gr.Tabs():
            with gr.TabItem("–í—Ö–æ–¥", id="login"):
                with gr.Column():
                    gr.Markdown("### –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
                    with gr.Row():
                        login_input = gr.Textbox(label="–õ–æ–≥–∏–Ω", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω")
                        password_input = gr.Textbox(label="–ü–∞—Ä–æ–ª—å", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
                    login_btn = gr.Button("–í–æ–π—Ç–∏")
                    login_status = gr.Textbox(label="–°—Ç–∞—Ç—É—Å", interactive=False)
                    
            with gr.TabItem("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", id="register"):
                with gr.Column():
                    gr.Markdown("### –°–æ–∑–¥–∞–Ω–∏–µ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏")
                    with gr.Row():
                        new_login = gr.Textbox(label="–õ–æ–≥–∏–Ω")
                        new_password = gr.Textbox(label="–ü–∞—Ä–æ–ª—å", type="password")
                    with gr.Row():
                        new_full_name = gr.Textbox(label="–§–ò–û")
                        new_email = gr.Textbox(label="Email")
                    role_radio = gr.Radio(["student", "teacher"], label="–†–æ–ª—å")
                    register_btn = gr.Button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
                    register_status = gr.Textbox(label="–°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", interactive=False)
        
        with gr.Column(visible=False) as user_panel:
            user_info = gr.Textbox(label="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å", interactive=False)
            logout_btn = gr.Button("–í—ã–π—Ç–∏")
        
        with gr.Column(visible=False) as student_panel:
            with gr.Tab("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Å—Å–µ"):
                gr.Markdown("### –ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞")
                teacher_id_input = gr.Textbox(label="ID –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
                essay_input = gr.Textbox(label="–¢–µ–∫—Å—Ç —ç—Å—Å–µ", lines=10, placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —ç—Å—Å–µ –∑–¥–µ—Å—å...")
                submit_btn = gr.Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ—Ü–µ–Ω–∫—É")
                
                with gr.Row():
                    scores_output = gr.Label(label="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏")
                    feedback_output = gr.Textbox(label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", interactive=False, lines=6)
            
            with gr.Tab("–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"):
                progress_plot = gr.Plot(label="–ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫")
                with gr.Row():
                    avg_argument = gr.Number(label="–°—Ä–µ–¥–Ω—è—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è")
                    avg_logic = gr.Number(label="–°—Ä–µ–¥–Ω—è—è –ª–æ–≥–∏–∫–∞")
                    avg_clarity = gr.Number(label="–°—Ä–µ–¥–Ω—è—è —è—Å–Ω–æ—Å—Ç—å")
                    avg_originality = gr.Number(label="–°—Ä–µ–¥–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
        
        with gr.Column(visible=False) as teacher_panel:
            gr.Markdown("### –ü–∞–Ω–µ–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
            with gr.Tab("–û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—ã"):
                student_select = gr.Dropdown(label="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞")
                essay_display = gr.Textbox(label="–≠—Å—Å–µ", interactive=False, lines=10)
                score_argument = gr.Slider(1, 5, step=0.1, label="–ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è")
                score_logic = gr.Slider(1, 5, step=0.1, label="–õ–æ–≥–∏–∫–∞")
                score_clarity = gr.Slider(1, 5, step=0.1, label="–Ø—Å–Ω–æ—Å—Ç—å")
                score_originality = gr.Slider(1, 5, step=0.1, label="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
                save_btn = gr.Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É")
            
            with gr.Tab("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã"):
                group_stats = gr.Dataframe(label="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–ø–ø—ã")
                export_btn = gr.Button("–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    register_btn.click(
        fn=register_new_user,
        inputs=[new_login, new_password, role_radio, new_full_name, new_email],
        outputs=register_status
    )
    
    login_btn.click(
        fn=handle_login,
        inputs=[login_input, password_input],
        outputs=[login_status, user_info, user_panel, student_panel, teacher_panel]
    )
    
    submit_btn.click(
        fn=submit_essay,
        inputs=[user_info, teacher_id_input, essay_input],
        outputs=[scores_output, feedback_output]
    )
    
    user_info.change(
        fn=update_progress_plot,
        inputs=user_info,
        outputs=progress_plot
    )

if __name__ == "__main__":
    app.launch(server_name="0.0.0.0")