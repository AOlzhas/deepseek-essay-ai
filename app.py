import sys
import subprocess
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
import gradio as gr

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ NumPy ---
try:
    import numpy as np
    print(f"‚úì NumPy {np.__version__} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
except ImportError:
    print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NumPy...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "numpy"])
    import numpy as np

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ ---
def load_model():
    try:
        tokenizer = AutoTokenizer.from_pretrained("TinyLlama/TinyLlama-1.1B-Chat-v1.0")
        model = AutoModelForCausalLM.from_pretrained(
            "TinyLlama/TinyLlama-1.1B-Chat-v1.0",
            device_map="auto",
            torch_dtype="auto"
        )
        pipe = pipeline(
            "text-generation",
            model=model,
            tokenizer=tokenizer
        )
        return pipe
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

model = load_model()

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ---
def generate_response(prompt, grade):
    if not model:
        return "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ."
    
    try:
        instruction = f"""
        [–†–æ–ª—å] –£—á–∏—Ç–µ–ª—å –¥–ª—è {grade} –∫–ª–∞—Å—Å–∞
        [–ó–∞–¥–∞—á–∞] {prompt}
        [–û—Ç–≤–µ—Ç]:"""
        
        output = model(
            instruction,
            max_new_tokens=200,
            temperature=0.7,
            do_sample=True
        )
        return output[0]['generated_text'].split("[–û—Ç–≤–µ—Ç]:")[-1].strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio ---
with gr.Blocks() as app:
    gr.Markdown("# üéì –†–∞–∑–≤–∏—Ç–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è")
    
    with gr.Row():
        input_text = gr.Textbox(label="–í–æ–ø—Ä–æ—Å", lines=3)
        grade = gr.Slider(6, 11, value=8, label="–ö–ª–∞—Å—Å")
    
    btn = gr.Button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")
    output = gr.Textbox(label="–û—Ç–≤–µ—Ç", interactive=False)
    
    btn.click(
        fn=generate_response,
        inputs=[input_text, grade],
        outputs=output
    )

if __name__ == "__main__":
    app.launch(server_name="0.0.0.0")